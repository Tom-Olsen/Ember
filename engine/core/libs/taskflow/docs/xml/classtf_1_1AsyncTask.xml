<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.1" xml:lang="en-US">
  <compounddef id="classtf_1_1AsyncTask" kind="class" language="C++" prot="public">
    <compoundname>tf::AsyncTask</compoundname>
    <includes refid="async__task_8hpp" local="no">taskflow/core/async_task.hpp</includes>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classtf_1_1AsyncTask_1a763b2f90bc53f92d680a635fe28e858e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Executor</definition>
        <argsstring></argsstring>
        <name>Executor</name>
        <qualifiedname>tf::AsyncTask::Executor</qualifiedname>
        <param>
          <type><ref refid="classtf_1_1Executor" kindref="compound">Executor</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="47" column="16" bodyfile="taskflow/core/async_task.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1AsyncTask_1aa84e10d306fd24a7ecfa8de2cc964cac" prot="private" static="no" mutable="no">
        <type>Node *</type>
        <definition>Node* tf::AsyncTask::_node</definition>
        <argsstring></argsstring>
        <name>_node</name>
        <qualifiedname>tf::AsyncTask::_node</qualifiedname>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="163" column="10" bodyfile="taskflow/core/async_task.hpp" bodystart="163" bodyend="163"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1AsyncTask_1a68689c79c7d794a8be2e1c181c818001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::AsyncTask::AsyncTask</definition>
        <argsstring>()=default</argsstring>
        <name>AsyncTask</name>
        <qualifiedname>tf::AsyncTask::AsyncTask</qualifiedname>
        <briefdescription>
<para>constructs an empty task handle </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="54" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1AsyncTask_1a148ddcabda8fd44746b278499cd4cb53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::AsyncTask::~AsyncTask</definition>
        <argsstring>()</argsstring>
        <name>~AsyncTask</name>
        <qualifiedname>tf::AsyncTask::~AsyncTask</qualifiedname>
        <briefdescription>
<para>destroys the managed dependent-async task if this is the last owner </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="59" column="5" bodyfile="taskflow/core/async_task.hpp" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1AsyncTask_1a682bc679a773da5e45714f71c8137f70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::AsyncTask::AsyncTask</definition>
        <argsstring>(const AsyncTask &amp;rhs)</argsstring>
        <name>AsyncTask</name>
        <qualifiedname>tf::AsyncTask::AsyncTask</qualifiedname>
        <param>
          <type>const <ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>constructs a dependent-async task that shares ownership of <computeroutput>rhs</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="64" column="5" bodyfile="taskflow/core/async_task.hpp" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1AsyncTask_1a5a31f85d2ee542f62e784d551ec78896" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::AsyncTask::AsyncTask</definition>
        <argsstring>(AsyncTask &amp;&amp;rhs)</argsstring>
        <name>AsyncTask</name>
        <qualifiedname>tf::AsyncTask::AsyncTask</qualifiedname>
        <param>
          <type><ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>move-constructs an dependent-async task from <computeroutput>rhs</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="69" column="5" bodyfile="taskflow/core/async_task.hpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1AsyncTask_1a14fa18d27a02c41e01b48ea07e87f5c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref> &amp;</type>
        <definition>AsyncTask &amp; tf::AsyncTask::operator=</definition>
        <argsstring>(const AsyncTask &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>tf::AsyncTask::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>copy-assigns the dependent-async task from <computeroutput>rhs</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>Releases the managed object of <computeroutput>this</computeroutput> and retains a new shared ownership of <computeroutput>rhs</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="77" column="15" bodyfile="taskflow/core/async_task.hpp" bodystart="210" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1AsyncTask_1a8dc18d17f3a5d72ef4d9c20ebf7ade4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref> &amp;</type>
        <definition>AsyncTask &amp; tf::AsyncTask::operator=</definition>
        <argsstring>(AsyncTask &amp;&amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>tf::AsyncTask::operator=</qualifiedname>
        <param>
          <type><ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>move-assigns the dependent-async task from <computeroutput>rhs</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>Releases the managed object of <computeroutput>this</computeroutput> and takes over the ownership of <computeroutput>rhs</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="84" column="15" bodyfile="taskflow/core/async_task.hpp" bodystart="218" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1AsyncTask_1ae42c70dc0c5edc6d58f47b346125fca3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::AsyncTask::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>tf::AsyncTask::empty</qualifiedname>
        <briefdescription>
<para>checks if this dependent-async task is associated with any task </para>
        </briefdescription>
        <detaileddescription>
<para>An empty dependent-async task is not associated with any task created from the executor.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">tf::AsyncTask<sp/>task;</highlight></codeline>
<codeline><highlight class="normal">assert(task.<ref refid="classtf_1_1AsyncTask_1ae42c70dc0c5edc6d58f47b346125fca3" kindref="member">empty</ref>());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="97" column="10" bodyfile="taskflow/core/async_task.hpp" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1AsyncTask_1a7c12835577fbdc1bca3190cf92c78088" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::AsyncTask::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <qualifiedname>tf::AsyncTask::reset</qualifiedname>
        <briefdescription>
<para>release the managed object of <computeroutput>this</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>Releases the ownership of the managed task, if any. After the call <computeroutput>*this</computeroutput> manages no task.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">tf::AsyncTask<sp/>task<sp/>=<sp/>executor.silent_dependent_async([](){});</highlight></codeline>
<codeline><highlight class="normal">assert(task.<ref refid="classtf_1_1AsyncTask_1ae42c70dc0c5edc6d58f47b346125fca3" kindref="member">empty</ref>()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">task.<ref refid="classtf_1_1AsyncTask_1a7c12835577fbdc1bca3190cf92c78088" kindref="member">reset</ref>();</highlight></codeline>
<codeline><highlight class="normal">assert(task.<ref refid="classtf_1_1AsyncTask_1ae42c70dc0c5edc6d58f47b346125fca3" kindref="member">empty</ref>()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="112" column="10" bodyfile="taskflow/core/async_task.hpp" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1AsyncTask_1a826a2ea909094f5a26c2df876de58056" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::AsyncTask::hash_value</definition>
        <argsstring>() const</argsstring>
        <name>hash_value</name>
        <qualifiedname>tf::AsyncTask::hash_value</qualifiedname>
        <briefdescription>
<para>obtains the hashed value of this dependent-async task </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">tf::AsyncTask<sp/>task<sp/>=<sp/>executor.silent_dependent_async([](){});</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>task.<ref refid="classtf_1_1AsyncTask_1a826a2ea909094f5a26c2df876de58056" kindref="member">hash_value</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="122" column="12" bodyfile="taskflow/core/async_task.hpp" bodystart="237" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1AsyncTask_1a6a4a54030f57d1ef05c04ae01825165d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::AsyncTask::use_count</definition>
        <argsstring>() const</argsstring>
        <name>use_count</name>
        <qualifiedname>tf::AsyncTask::use_count</qualifiedname>
        <briefdescription>
<para>returns the number of shared owners that are currently managing this dependent-async task </para>
        </briefdescription>
        <detaileddescription>
<para>In a multithreaded environment, <computeroutput>use_count</computeroutput> atomically retrieves (with <computeroutput>memory_order_relaxed</computeroutput> load) the number of <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> instances that manage the current task.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">tf::AsyncTask<sp/>task;</highlight></codeline>
<codeline><highlight class="normal">assert(task.<ref refid="classtf_1_1AsyncTask_1a6a4a54030f57d1ef05c04ae01825165d" kindref="member">use_count</ref>()<sp/>==<sp/>0);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="137" column="12" bodyfile="taskflow/core/async_task.hpp" bodystart="242" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1AsyncTask_1aefeefa30d7cafdfbb7dc8def542e8e51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::AsyncTask::is_done</definition>
        <argsstring>() const</argsstring>
        <name>is_done</name>
        <qualifiedname>tf::AsyncTask::is_done</qualifiedname>
        <briefdescription>
<para>checks if this dependent-async task finishes </para>
        </briefdescription>
        <detaileddescription>
<para>In a multithreaded environment, <computeroutput>is_done</computeroutput> atomically retrieves (with <computeroutput>memory_order_acquire</computeroutput> load) the underlying state bit that indicates the completion of this dependent-async task. If the dependent-async task is empty, returns <computeroutput>true</computeroutput>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">tf::AsyncTask<sp/>task<sp/>=<sp/>executor.silent_dependent_async([](){});</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(task.<ref refid="classtf_1_1AsyncTask_1aefeefa30d7cafdfbb7dc8def542e8e51" kindref="member">is_done</ref>()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;dependent-async<sp/>task<sp/>finishes\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">task.<ref refid="classtf_1_1AsyncTask_1a7c12835577fbdc1bca3190cf92c78088" kindref="member">reset</ref>();</highlight></codeline>
<codeline><highlight class="normal">assert(task.<ref refid="classtf_1_1AsyncTask_1aefeefa30d7cafdfbb7dc8def542e8e51" kindref="member">is_done</ref>()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="157" column="10" bodyfile="taskflow/core/async_task.hpp" bodystart="250" bodyend="255"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1AsyncTask_1ad6a3bcc865f13ecddc1d32306b6df1bb" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::AsyncTask::AsyncTask</definition>
        <argsstring>(Node *)</argsstring>
        <name>AsyncTask</name>
        <qualifiedname>tf::AsyncTask::AsyncTask</qualifiedname>
        <param>
          <type>Node *</type>
          <defname>ptr</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="161" column="14" bodyfile="taskflow/core/async_task.hpp" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1AsyncTask_1ae2eefe6ee6de4f97dd0b247b053addb1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::AsyncTask::_incref</definition>
        <argsstring>()</argsstring>
        <name>_incref</name>
        <qualifiedname>tf::AsyncTask::_incref</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="165" column="10" bodyfile="taskflow/core/async_task.hpp" bodystart="175" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1AsyncTask_1aaee1f8ef1109eb90ad20bac2cba4eaca" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::AsyncTask::_decref</definition>
        <argsstring>()</argsstring>
        <name>_decref</name>
        <qualifiedname>tf::AsyncTask::_decref</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/async_task.hpp" line="166" column="10" bodyfile="taskflow/core/async_task.hpp" bodystart="184" bodyend="190"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>class to hold a dependent asynchronous task with shared ownership </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> is a lightweight handle that retains <emphasis>shared</emphasis> ownership of a dependent asynchronous (dependent-async) task created by an executor. This shared ownership ensures that the dependent-async task remains alive when adding it to the dependency list of another dependent-async task, thus avoiding the classical <ulink url="https://en.wikipedia.org/wiki/ABA_problem">ABA problem</ulink>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>main<sp/>thread<sp/>retains<sp/>shared<sp/>ownership<sp/>of<sp/>async<sp/>task<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tf::AsyncTask<sp/>A<sp/>=<sp/>executor.silent_dependent_async([](){});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>task<sp/>A<sp/>remains<sp/>alive<sp/>(i.e.,<sp/>at<sp/>least<sp/>one<sp/>ref<sp/>count<sp/>by<sp/>the<sp/>main<sp/>thread)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>being<sp/>added<sp/>to<sp/>the<sp/>dependency<sp/>list<sp/>of<sp/>async<sp/>task<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tf::AsyncTask<sp/>B<sp/>=<sp/>executor.silent_dependent_async([](){},<sp/>A);</highlight></codeline>
</programlisting></para>
<para><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> is implemented based on the logic of C++ smart pointer <ref refid="cpp/memory/shared_ptr" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref> and is considered cheap to copy or move as long as only a handful of objects own it. When a worker completes an async task, it will remove the task from the executor, decrementing the number of shared owners by one. If that counter reaches zero, the task is destroyed.</para>
<para><simplesect kind="note"><para>To know more about dependent-async task, please refer to <ref refid="DependentAsyncTasking" kindref="compound">Asynchronous Tasking with Dependencies</ref>. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="taskflow/core/async_task.hpp" line="45" column="1" bodyfile="taskflow/core/async_task.hpp" bodystart="45" bodyend="167"/>
    <listofallmembers>
      <member refid="classtf_1_1AsyncTask_1aaee1f8ef1109eb90ad20bac2cba4eaca" prot="private" virt="non-virtual"><scope>tf::AsyncTask</scope><name>_decref</name></member>
      <member refid="classtf_1_1AsyncTask_1ae2eefe6ee6de4f97dd0b247b053addb1" prot="private" virt="non-virtual"><scope>tf::AsyncTask</scope><name>_incref</name></member>
      <member refid="classtf_1_1AsyncTask_1aa84e10d306fd24a7ecfa8de2cc964cac" prot="private" virt="non-virtual"><scope>tf::AsyncTask</scope><name>_node</name></member>
      <member refid="classtf_1_1AsyncTask_1a68689c79c7d794a8be2e1c181c818001" prot="public" virt="non-virtual"><scope>tf::AsyncTask</scope><name>AsyncTask</name></member>
      <member refid="classtf_1_1AsyncTask_1a682bc679a773da5e45714f71c8137f70" prot="public" virt="non-virtual"><scope>tf::AsyncTask</scope><name>AsyncTask</name></member>
      <member refid="classtf_1_1AsyncTask_1a5a31f85d2ee542f62e784d551ec78896" prot="public" virt="non-virtual"><scope>tf::AsyncTask</scope><name>AsyncTask</name></member>
      <member refid="classtf_1_1AsyncTask_1ad6a3bcc865f13ecddc1d32306b6df1bb" prot="private" virt="non-virtual"><scope>tf::AsyncTask</scope><name>AsyncTask</name></member>
      <member refid="classtf_1_1AsyncTask_1ae42c70dc0c5edc6d58f47b346125fca3" prot="public" virt="non-virtual"><scope>tf::AsyncTask</scope><name>empty</name></member>
      <member refid="classtf_1_1AsyncTask_1a763b2f90bc53f92d680a635fe28e858e" prot="private" virt="non-virtual"><scope>tf::AsyncTask</scope><name>Executor</name></member>
      <member refid="classtf_1_1AsyncTask_1a826a2ea909094f5a26c2df876de58056" prot="public" virt="non-virtual"><scope>tf::AsyncTask</scope><name>hash_value</name></member>
      <member refid="classtf_1_1AsyncTask_1aefeefa30d7cafdfbb7dc8def542e8e51" prot="public" virt="non-virtual"><scope>tf::AsyncTask</scope><name>is_done</name></member>
      <member refid="classtf_1_1AsyncTask_1a14fa18d27a02c41e01b48ea07e87f5c5" prot="public" virt="non-virtual"><scope>tf::AsyncTask</scope><name>operator=</name></member>
      <member refid="classtf_1_1AsyncTask_1a8dc18d17f3a5d72ef4d9c20ebf7ade4a" prot="public" virt="non-virtual"><scope>tf::AsyncTask</scope><name>operator=</name></member>
      <member refid="classtf_1_1AsyncTask_1a7c12835577fbdc1bca3190cf92c78088" prot="public" virt="non-virtual"><scope>tf::AsyncTask</scope><name>reset</name></member>
      <member refid="classtf_1_1AsyncTask_1a6a4a54030f57d1ef05c04ae01825165d" prot="public" virt="non-virtual"><scope>tf::AsyncTask</scope><name>use_count</name></member>
      <member refid="classtf_1_1AsyncTask_1a148ddcabda8fd44746b278499cd4cb53" prot="public" virt="non-virtual"><scope>tf::AsyncTask</scope><name>~AsyncTask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
